/**
 * Generated by "@vuepress/internal-site-data"
 */
export const siteData = {
  "title": "PENG BlOG",
  "description": "Web development, Frontend, JavaScript",
  "base": "/",
  "headTags": [],
  "pages": [
    {
      "title": "About",
      "frontmatter": {
        "title": "About",
        "description": " Hi, I'm Peng Yang\n\nAs you can tell from my posts, I'm a software engineer. Currently, I work in Wuhan. Record feelings in work and life, Hope to help you!\n ..."
      },
      "regularPath": "/",
      "relativePath": "Readme.md",
      "key": "v-fe328110",
      "path": "/",
      "summary": " Hi, I'm Peng Yang\n\nAs you can tell from my posts, I'm a software engineer. Currently, I work in Wuhan. Record feelings in work and life, Hope to help you!\n ...",
      "lastUpdated": "2/24/2021, 5:13:42 PM"
    },
    {
      "title": "JS异步",
      "frontmatter": {
        "title": "JS异步",
        "date": "2018-10-27T00:00:00.000Z",
        "tags": [
          "Javascript"
        ],
        "description": "\nJS 为何会有异步\n\nJS 是单线程的语言，所谓“单线程”就是一根筋，对于拿到的程序，一行一行的执行，上面的没执行为完，那就等着。\nvar i,\n\tt = Date.now()\n\nfor (i = 0; i < 100000000; i++) {\n\t// ...\n}\nconsole.log(Date.now() - t) // 250\n上面的程序花费 250ms ...",
        "layout": "Post",
        "permalink": "/:year/:month/:day/:slug"
      },
      "regularPath": "/_posts/2018-10-27-javascript-async.html",
      "relativePath": "_posts/2018-10-27-javascript-async.md",
      "key": "v-00d7eeae",
      "path": "/2018/10/27/javascript-async/",
      "headers": [
        {
          "level": 2,
          "title": "何为异步",
          "slug": "何为异步"
        },
        {
          "level": 2,
          "title": "jQuery异步",
          "slug": "jquery异步"
        },
        {
          "level": 2,
          "title": "ES6的Promise",
          "slug": "es6的promise"
        }
      ],
      "summary": "\nJS 为何会有异步\n\nJS 是单线程的语言，所谓“单线程”就是一根筋，对于拿到的程序，一行一行的执行，上面的没执行为完，那就等着。\nvar i,\n\tt = Date.now()\n\nfor (i = 0; i < 100000000; i++) {\n\t// ...\n}\nconsole.log(Date.now() - t) // 250\n上面的程序花费 250ms ...",
      "id": "blog",
      "pid": "blog",
      "lastUpdated": "2/23/2021, 4:12:01 PM"
    },
    {
      "title": "Webpack 初始化",
      "frontmatter": {
        "title": "Webpack 初始化",
        "date": "2019-5-28",
        "tags": [
          "Webpack",
          "工具"
        ],
        "description": "\n详细配置参考 webpack中文文档\n\n创建项目目录  cd project\n\n在命令行工具中运行 yarn init\n\n安装webpack包 yarn install webpack webpack-cli --dev\n\n安装webpack插件 `yarn install webpack-dev ...",
        "layout": "Post",
        "permalink": "/:year/:month/:day/:slug"
      },
      "regularPath": "/_posts/2019-5-28-webpack-init.html",
      "relativePath": "_posts/2019-5-28-webpack-init.md",
      "key": "v-5b151f3a",
      "path": "/2019/05/28/webpack-init/",
      "headers": [
        {
          "level": 2,
          "title": "webpack 初始化",
          "slug": "webpack-初始化"
        }
      ],
      "summary": "\n详细配置参考 webpack中文文档\n\n创建项目目录  cd project\n\n在命令行工具中运行 yarn init\n\n安装webpack包 yarn install webpack webpack-cli --dev\n\n安装webpack插件 `yarn install webpack-dev ...",
      "id": "blog",
      "pid": "blog",
      "lastUpdated": "2/23/2021, 4:12:01 PM"
    },
    {
      "title": "常用函数",
      "frontmatter": {
        "title": "常用函数",
        "date": "2019-5-29",
        "tags": [
          "Javascript",
          "工具"
        ],
        "description": "/jquery ajax函数/\nfunction Ajax(url, type, success, error) {\n  $.ajax({\n    url: url,\n    type: type,\n    dataType: 'json',\n    timeout: 10000,\n    success: function(d) {\n      var data = d.dat ...",
        "layout": "Post",
        "permalink": "/:year/:month/:day/:slug"
      },
      "regularPath": "/_posts/2019-5-29-utils-func.html",
      "relativePath": "_posts/2019-5-29-utils-func.md",
      "key": "v-48f50183",
      "path": "/2019/05/29/utils-func/",
      "summary": "/jquery ajax函数/\nfunction Ajax(url, type, success, error) {\n  $.ajax({\n    url: url,\n    type: type,\n    dataType: 'json',\n    timeout: 10000,\n    success: function(d) {\n      var data = d.dat ...",
      "id": "blog",
      "pid": "blog",
      "lastUpdated": "2/24/2021, 5:13:42 PM"
    },
    {
      "title": "JS原型",
      "frontmatter": {
        "title": "JS原型",
        "date": "2018-9-5",
        "tags": [
          "Javascript"
        ],
        "description": "\njs有六种数据类型Number、String、Boolean、Undefined、Null（ECMAScript 2015新增了一种基本数据类型：symbol）\n我们可以用typeof检测数据类型\ntypeof 123  // Number\ntypeof 'abc' // String\ntypeof true  // Boolean\ntypeof undefined  // ...",
        "layout": "Post",
        "permalink": "/:year/:month/:day/:slug"
      },
      "regularPath": "/_posts/2018-9-5-javascript-prototype.html",
      "relativePath": "_posts/2018-9-5-javascript-prototype.md",
      "key": "v-41c1ad79",
      "path": "/2018/09/05/javascript-prototype/",
      "headers": [
        {
          "level": 2,
          "title": "数据类型",
          "slug": "数据类型"
        },
        {
          "level": 2,
          "title": "函数和对象",
          "slug": "函数和对象"
        },
        {
          "level": 2,
          "title": "prototype原型",
          "slug": "prototype原型"
        },
        {
          "level": 2,
          "title": "隐式原型",
          "slug": "隐式原型"
        },
        {
          "level": 2,
          "title": "instanceof",
          "slug": "instanceof"
        },
        {
          "level": 2,
          "title": "继承",
          "slug": "继承"
        },
        {
          "level": 2,
          "title": "灵活性",
          "slug": "灵活性"
        },
        {
          "level": 2,
          "title": "es6中class",
          "slug": "es6中class"
        }
      ],
      "summary": "\njs有六种数据类型Number、String、Boolean、Undefined、Null（ECMAScript 2015新增了一种基本数据类型：symbol）\n我们可以用typeof检测数据类型\ntypeof 123  // Number\ntypeof 'abc' // String\ntypeof true  // Boolean\ntypeof undefined  // ...",
      "id": "blog",
      "pid": "blog",
      "lastUpdated": "2/23/2021, 4:12:01 PM"
    },
    {
      "title": "JS设计模式",
      "frontmatter": {
        "title": "JS设计模式",
        "date": "2019-4-5",
        "tags": [
          "Javascript",
          "设计模式"
        ],
        "description": "\n何为设计\n即按照一种思路或者标准来实现功能\n功能相同，可以由不同设计方案来实现\n伴随需求的增加，设计的作用才能体现出来\n\nUNIX/LINUX设计思想\n\n参考文献 《UNIX/LINUX设计思想》\n\n准则1: 小即是美\n准则2: 让每个程 ...",
        "layout": "Post",
        "permalink": "/:year/:month/:day/:slug"
      },
      "regularPath": "/_posts/2019-4-5-javascript-design.html",
      "relativePath": "_posts/2019-4-5-javascript-design.md",
      "key": "v-701115ba",
      "path": "/2019/04/05/javascript-design/",
      "headers": [
        {
          "level": 2,
          "title": "设计原则",
          "slug": "设计原则"
        },
        {
          "level": 3,
          "title": "何为设计",
          "slug": "何为设计"
        },
        {
          "level": 3,
          "title": "UNIX/LINUX设计思想",
          "slug": "unix-linux设计思想"
        },
        {
          "level": 2,
          "title": "SOLID五大设计原则",
          "slug": "solid五大设计原则"
        },
        {
          "level": 2,
          "title": "设计模式",
          "slug": "设计模式"
        },
        {
          "level": 3,
          "title": "工厂模式",
          "slug": "工厂模式"
        },
        {
          "level": 3,
          "title": "单例模式",
          "slug": "单例模式"
        },
        {
          "level": 3,
          "title": "适配器模式",
          "slug": "适配器模式"
        },
        {
          "level": 3,
          "title": "装饰器模式",
          "slug": "装饰器模式"
        }
      ],
      "summary": "\n何为设计\n即按照一种思路或者标准来实现功能\n功能相同，可以由不同设计方案来实现\n伴随需求的增加，设计的作用才能体现出来\n\nUNIX/LINUX设计思想\n\n参考文献 《UNIX/LINUX设计思想》\n\n准则1: 小即是美\n准则2: 让每个程 ...",
      "id": "blog",
      "pid": "blog",
      "lastUpdated": "2/23/2021, 4:12:01 PM"
    },
    {
      "title": "JS闭包",
      "frontmatter": {
        "title": "JS闭包",
        "date": "2018-9-25",
        "tags": [
          "Javascript"
        ],
        "description": "\n什么是“执行上下文”(也叫做“执行上下文环境”）？我们先不定义，先看以下几种情况。\n\n第一种情况，变量声明，默认赋值为undefined\n首先我们在浏览器控制台来调试一段代码。\nconsole.log(a) // Uncaught ReferenceError: a is not defined\n\nconsole.log(a) // undefined\nvar a\n\ncon ...",
        "layout": "Post",
        "permalink": "/:year/:month/:day/:slug"
      },
      "regularPath": "/_posts/2018-9-25-javascript-closure.html",
      "relativePath": "_posts/2018-9-25-javascript-closure.md",
      "key": "v-74e62bc3",
      "path": "/2018/09/25/javascript-closure/",
      "headers": [
        {
          "level": 2,
          "title": "执行上下文",
          "slug": "执行上下文"
        },
        {
          "level": 2,
          "title": "this",
          "slug": "this"
        },
        {
          "level": 2,
          "title": "执行上下文栈",
          "slug": "执行上下文栈"
        },
        {
          "level": 2,
          "title": "作用域",
          "slug": "作用域"
        },
        {
          "level": 2,
          "title": "自由变量到作用域链",
          "slug": "自由变量到作用域链"
        },
        {
          "level": 2,
          "title": "闭包",
          "slug": "闭包"
        }
      ],
      "summary": "\n什么是“执行上下文”(也叫做“执行上下文环境”）？我们先不定义，先看以下几种情况。\n\n第一种情况，变量声明，默认赋值为undefined\n首先我们在浏览器控制台来调试一段代码。\nconsole.log(a) // Uncaught ReferenceError: a is not defined\n\nconsole.log(a) // undefined\nvar a\n\ncon ...",
      "id": "blog",
      "pid": "blog",
      "lastUpdated": "2/23/2021, 4:12:01 PM"
    },
    {
      "title": "开发规范",
      "frontmatter": {
        "title": "开发规范",
        "date": "2018-9-6",
        "tags": [
          "业务"
        ],
        "description": "\nBEM思想\n\nBEM的意思就是块（block）、元素（element）、修饰符（modifier）,是由Yandex团队提出的一种前端命名方法论。这种巧妙的命名方法让你的CSS类对其他开发者来说更加透明而且更有意义。BEM命名约定更加严格，而且包含更多的信息，它们用于一个团队开发一个耗时的大项目。\n\n命名约定的模式如下：\n.block{}\n.bloc ...",
        "layout": "Post",
        "permalink": "/:year/:month/:day/:slug"
      },
      "regularPath": "/_posts/2018-9-6-business-standard.html",
      "relativePath": "_posts/2018-9-6-business-standard.md",
      "key": "v-2bc63283",
      "path": "/2018/09/06/business-standard/",
      "headers": [
        {
          "level": 2,
          "title": "css 命名规范",
          "slug": "css-命名规范"
        },
        {
          "level": 3,
          "title": "BEM思想",
          "slug": "bem思想"
        },
        {
          "level": 3,
          "title": "样式文件划分",
          "slug": "样式文件划分"
        },
        {
          "level": 2,
          "title": "js 命名规范",
          "slug": "js-命名规范"
        },
        {
          "level": 3,
          "title": "变量",
          "slug": "变量"
        },
        {
          "level": 3,
          "title": "常量",
          "slug": "常量"
        },
        {
          "level": 3,
          "title": "函数",
          "slug": "函数"
        },
        {
          "level": 3,
          "title": "类 & 构造函数",
          "slug": "类-构造函数"
        },
        {
          "level": 3,
          "title": "类的成员",
          "slug": "类的成员"
        },
        {
          "level": 3,
          "title": "vue命名规范",
          "slug": "vue命名规范"
        },
        {
          "level": 2,
          "title": "简易项目模块划分",
          "slug": "简易项目模块划分"
        },
        {
          "level": 3,
          "title": "database目录",
          "slug": "database目录"
        },
        {
          "level": 3,
          "title": "viewmodel目录",
          "slug": "viewmodel目录"
        },
        {
          "level": 3,
          "title": "controller目录",
          "slug": "controller目录"
        }
      ],
      "summary": "\nBEM思想\n\nBEM的意思就是块（block）、元素（element）、修饰符（modifier）,是由Yandex团队提出的一种前端命名方法论。这种巧妙的命名方法让你的CSS类对其他开发者来说更加透明而且更有意义。BEM命名约定更加严格，而且包含更多的信息，它们用于一个团队开发一个耗时的大项目。\n\n命名约定的模式如下：\n.block{}\n.bloc ...",
      "id": "blog",
      "pid": "blog",
      "lastUpdated": "2/23/2021, 4:12:01 PM"
    },
    {
      "frontmatter": {
        "layout": "Layout",
        "title": "貼文"
      },
      "regularPath": "/blog/",
      "key": "v-424df898",
      "path": "/blog/"
    },
    {
      "frontmatter": {
        "layout": "FrontmatterKey",
        "title": "Tag"
      },
      "regularPath": "/tag/",
      "key": "v-b1564aac",
      "path": "/tag/"
    },
    {
      "frontmatter": {
        "layout": "FrontmatterPagination",
        "title": "Javascript Tag"
      },
      "regularPath": "/tag/Javascript/",
      "key": "v-5f97b358",
      "path": "/tag/Javascript/"
    },
    {
      "frontmatter": {
        "layout": "FrontmatterPagination",
        "title": "Webpack Tag"
      },
      "regularPath": "/tag/Webpack/",
      "key": "v-ad8a01a8",
      "path": "/tag/Webpack/"
    },
    {
      "frontmatter": {
        "layout": "FrontmatterPagination",
        "title": "工具 Tag"
      },
      "regularPath": "/tag/%E5%B7%A5%E5%85%B7/",
      "key": "v-97019ce8",
      "path": "/tag/工具/"
    },
    {
      "frontmatter": {
        "layout": "FrontmatterPagination",
        "title": "设计模式 Tag"
      },
      "regularPath": "/tag/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",
      "key": "v-ae3001b6",
      "path": "/tag/设计模式/"
    },
    {
      "frontmatter": {
        "layout": "FrontmatterPagination",
        "title": "业务 Tag"
      },
      "regularPath": "/tag/%E4%B8%9A%E5%8A%A1/",
      "key": "v-038768cf",
      "path": "/tag/业务/"
    },
    {
      "frontmatter": {
        "layout": "Layout",
        "title": "Page 2 | 貼文"
      },
      "regularPath": "/blog/page/2/",
      "key": "v-c3507bb6",
      "path": "/blog/page/2/"
    }
  ],
  "themeConfig": {
    "directories": [
      {
        "id": "blog",
        "dirname": "_posts",
        "title": "貼文",
        "path": "/blog/"
      }
    ],
    "sitemap": {
      "hostname": "http://blog.glinsunai.com"
    },
    "comment": {
      "service": "vssue",
      "autoCreateIssue": false,
      "prefix": "[Post]",
      "owner": "myronyang",
      "repo": "blog",
      "clientId": "9fadcba1f59dfb8f17b7",
      "clientSecret": "dbcb5aae3c3b6e9e88332b06ae2230d6629d25fa"
    },
    "newsletter": {
      "endpoint": "https://gmail.us5.list-manage.com/subscribe/post?u=942c0d587f8ea28269e80d6cd&amp;id=d77d789d53"
    },
    "nav": [
      {
        "text": "About",
        "link": "/"
      },
      {
        "text": "博客",
        "link": "/blog/"
      },
      {
        "text": "标签",
        "link": "/tag/"
      },
      {
        "text": "Github",
        "link": "https://github.com/myronyang"
      }
    ],
    "footer": {
      "contact": [
        {
          "type": "github",
          "link": "https://github.com/myronyang"
        },
        {
          "type": "mail",
          "link": "821253835@qq.com"
        },
        {
          "type": "web",
          "link": "http://tjui.glinsunai.com/#/"
        }
      ],
      "copyright": [
        {
          "text": "MyronYang © 2020",
          "link": ""
        }
      ]
    },
    "summary": true,
    "summaryLength": 200,
    "pwa": false
  }
}